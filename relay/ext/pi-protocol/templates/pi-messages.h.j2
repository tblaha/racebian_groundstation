/* THIS FILE HAS BEEN AUTOGENERATED BY generate_header.py, DO NOT MODIFY */

#ifndef PI_MESSAGES_H
#define PI_MESSAGES_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#ifdef PI_USE_PRINT_MSGS
#include <stdarg.h>
#endif
#include "pi-protocol.h"

// message payload parsing function
#if (PI_MODE & PI_RX)
pi_parse_msg_result_t piParseIntoMsg(const uint8_t msgId, const uint8_t byte, const uint8_t byteCount);
#endif // #ifdef (PI_MODE & PI_RX)

//--------------------------
// ------ MESSAGES ---------
//--------------------------

{% for msg in msgs %}
{% set piMsgDefine = "PI_MSG_"+msg.nameSNAKE_CAPS %}
{% set piMsgTypedef = "pi_"+msg.nameSNAKE_CAPS+"_t" %}
{% set piMsg = "piMsg"+msg.nameCamelCase %}
{% set piMsgA = piMsg+"A" %}
{% set piMsgB = piMsg+"B" %}
{% set piMsgTx = piMsg+"Tx" %}
{% set piMsgRx = piMsg+"Rx" %}
// ------ {{msg.nameSNAKE_CAPS}} ------
#define {{piMsgDefine}}_MODE PI_{{config.include_messages[msg.nameSNAKE_CAPS].mode}}

#define {{piMsgDefine}}_ID {{config.include_messages[msg.nameSNAKE_CAPS].id}}
#define {{piMsgDefine}}_PAYLOAD_LEN {{msg.payloadLen}}

// msg definition
typedef struct __{{piMsgTypedef}}
{
    uint8_t id;
    uint8_t len;
    // start of payload
{% for field, dtype in msg.fields.items() %}
    {{dtype}} {{field}};
{% endfor %}
} __attribute__((packed)) {{piMsgTypedef}};

// todo: we can save on memory, if we use a union as the tx-buffer and not
// separate structs, if they are only used one-at-a-time
#if (PI_MODE & PI_TX) && ({{piMsgDefine}}_MODE & PI_TX)
extern {{piMsgTypedef}} {{piMsgTx}};
#endif

#if (PI_MODE & PI_RX) && ({{piMsgDefine}}_MODE & PI_RX)
extern {{piMsgTypedef}} {{piMsgA}};
extern {{piMsgTypedef}} {{piMsgB}};
extern {{piMsgTypedef}}* {{piMsgRx}};
extern pi_msg_rx_state_t {{piMsgRx}}State;

//print function
#ifdef PI_USE_PRINT_MSGS
__attribute__((unused)) static inline void piPrintMsg{{msg.nameCamelCase}}(int (* printer)(const char* fmt, ...)) {
    printer("%s\n", "{{msg.nameCamelCase}}");
    if ({{piMsgRx}}) {
{% for field, dtype in msg.fields.items() %}
{% if dtype.startswith('int') %}
    {% set format_spec = '%d' %}
    {% set promoter = '' %}
{% elif dtype.startswith('uint') %}
    {% set format_spec = '%u' %}
    {% set promoter = '' %}
{% elif dtype.startswith('float') %}
    {% set format_spec = '%f' %}
    {% set promoter = '(double)' %}
{% elif dtype.startswith('double') %}
    {% set format_spec = '%f' %}
    {% set promoter = '' %}
{% else %}
    // jinja2 has no exception handling.. therefore
    {{ 0/0 }}
{% endif %}
        printer("    {{piMsgRx}}.%s%{{ msg.maxFieldStringLen + 1 - field|length }}s {{format_spec}}\n", "{{field}}", ":", {{promoter}}{{piMsgRx}}->{{field}});
{% endfor %}
    } else {
        printer("    {{piMsgRx}} is NULL. Message likely not received yet.\n");
    }
    printer("-----------\n");
}

#endif // #ifdef PI_USE_PRINT_MSGS

#endif // #if (PI_MODE & PI_RX) && ({{piMsgDefine}}_MODE & PI_MSG_RX)


{% endfor %} {# for msg in msgs #}

#ifdef __cplusplus
}
#endif

#endif // #ifndef PI_MESSAGES_H

