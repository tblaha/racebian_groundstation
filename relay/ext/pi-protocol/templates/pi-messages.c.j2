/* THIS FILE HAS BEEN AUTOGENERATED BY generate_header.py, DO NOT MODIFY */

#include <stdint.h>
#include "pi-messages.h"
#include "pi-protocol.h"
#include <stdio.h>

{% for msg in msgs %}
{% set piMsg = "piMsg"+msg.nameCamelCase %}
{% set piMsgDefine = "PI_MSG_"+msg.nameSNAKE_CAPS %}
{% set piMsgTypedef = "pi_"+msg.nameSNAKE_CAPS+"_t" %}
// ---- {{msg.nameSNAKE_CAPS}} ---- //
#if (PI_MODE & PI_TX) && ({{piMsgDefine}}_MODE & PI_TX)
{{piMsgTypedef}} {{piMsg}}Tx = {.id={{piMsgDefine}}_ID, .len={{piMsgDefine}}_PAYLOAD_LEN};
#endif

#if (PI_MODE & PI_RX) && ({{piMsgDefine}}_MODE & PI_RX)
{{piMsgTypedef}} {{piMsg}}A = {.id={{piMsgDefine}}_ID, .len={{piMsgDefine}}_PAYLOAD_LEN};
{{piMsgTypedef}} {{piMsg}}B = {.id={{piMsgDefine}}_ID, .len={{piMsgDefine}}_PAYLOAD_LEN};
{{piMsgTypedef}}* {{piMsg}}Rx = NULL;
pi_msg_rx_state_t {{piMsg}}RxState = PI_MSG_RX_STATE_NONE;
#endif


{% endfor %}


// ---- parsing function ---- //
#if (PI_MODE & PI_RX)
pi_parse_msg_result_t piParseIntoMsg(const uint8_t msgId, const uint8_t byte, const uint8_t byteCount) {
    static uint8_t _msgId = 0;
    static void * piMsgRxBuffer = NULL;
    static void ** piMsgRx_ptr = NULL;
    static void * piMsgA_ptr = NULL;
    static void * piMsgB_ptr = NULL;
    static pi_msg_rx_state_t * piMsgRxState_ptr = NULL;
    static uint8_t piMsgLen = 0;

    pi_parse_msg_result_t res = PI_PARSE_MSG_NO_ERROR;

    if (msgId > PI_MSG_MAX_ID)
        return PI_PARSE_MSG_INVALID_ID;

    //if (byteCount > PI_MSG_MAX_PAYLOAD_LEN)
    //    return PI_PARSE_MSG_EXCEEDS_MAX_PAYLOAD_LEN;

    if ((_msgId != msgId) || (byteCount == 0)) {
        // reset and re-assign buffers
        _msgId = msgId;

        switch(msgId) {
{% for msg in msgs %}
{% set piMsg = "piMsg"+msg.nameCamelCase %}
{% set piMsgDefine = "PI_MSG_"+msg.nameSNAKE_CAPS %}
{% set piMsgTypedef = "pi_"+msg.nameSNAKE_CAPS+"_t" %}
#if ({{piMsgDefine}}_MODE & PI_RX)
            case {{piMsgDefine}}_ID:
                piMsgRx_ptr = (void *)&{{piMsg}}Rx;
                piMsgA_ptr = &{{piMsg}}A;
                piMsgB_ptr = &{{piMsg}}B;
                piMsgRxState_ptr = &{{piMsg}}RxState;
                piMsgLen = {{piMsgDefine}}_PAYLOAD_LEN;
                break;
#endif
{% endfor %}
            default:
                return PI_PARSE_MSG_NO_SUCH_MSG;
        }
    }

    if (byteCount == 0)
        piMsgRxBuffer = (*piMsgRxState_ptr > PI_MSG_RX_STATE_A) ? piMsgA_ptr : piMsgB_ptr;
    else if (byteCount >= piMsgLen)
        return PI_PARSE_MSG_EXCEEDS_MSG_PAYLOAD_LEN;
    else if (byteCount == (piMsgLen - 1)) {
        *piMsgRxState_ptr = (*piMsgRxState_ptr == PI_MSG_RX_STATE_A) ? PI_MSG_RX_STATE_B : PI_MSG_RX_STATE_A;
        *piMsgRx_ptr = (*piMsgRxState_ptr == PI_MSG_RX_STATE_A) ? piMsgA_ptr : piMsgB_ptr;
        res = PI_PARSE_MSG_SUCCESS;
    }

    if (piMsgRxBuffer)
        *((uint8_t *)piMsgRxBuffer + byteCount + PI_MSG_PAYLOAD_LEN_BYTES + PI_MSG_ID_BYTES) = byte;
    else
        return PI_PARSE_MSG_NULL_BUFFER;

    return res;
}
#endif  // PI_MODE & PI_RX


// printing function
#if (PI_MODE & PI_RX) && defined(PI_USE_PRINT_MSGS)
void piPrintMsgs(int (*printer)(const char* s, ...)) {
    static int i = 0;
    printer("\n+------------ piPrintMsgs invokation %d -------------+\n", i++);
{% for msg in msgs %}
{% set piMsgDefine = "PI_MSG_"+msg.nameSNAKE_CAPS %}
#if {{piMsgDefine}}_MODE & PI_RX
    piPrintMsg{{msg.nameCamelCase}}(printer);
#endif
{% endfor %}
}
#endif
